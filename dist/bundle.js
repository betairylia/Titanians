(()=>{"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n,r=function(){function n(){var e,t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),e=this,t="listeners",r=new Set,t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,this.emit=this.emit.bind(this)}var r,i;return r=n,(i=[{key:"clear",value:function(){this.listeners.clear()}},{key:"add",value:function(e){var t=this;return this.listeners.add(e),function(){return t.remove(e)}}},{key:"remove",value:function(e){this.listeners.delete(e)}},{key:"emit",value:function(t){var n,r=function(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var i=0,o=function(){};return{s:o,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,u=!0,a=!1;return{s:function(){r=r.call(t)},n:function(){var e=r.next();return u=e.done,e},e:function(e){a=!0,s=e},f:function(){try{u||null==r.return||r.return()}finally{if(a)throw s}}}}(this.listeners);try{for(r.s();!(n=r.n()).done;)(0,n.value)(t)}catch(e){r.e(e)}finally{r.f()}}}])&&t(r.prototype,i),Object.defineProperty(r,"prototype",{writable:!1}),n}();function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n=Symbol.iterator;var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];o(this,e),u(this,"onEntityAdded",new r),u(this,"onEntityRemoved",new r),u(this,"entityPositions",new Map),this.entities=t,this.add=this.add.bind(this),this.remove=this.remove.bind(this);for(var n=0;n<t.length;n++)this.entityPositions.set(t[n],n)}var t,a;return t=e,(a=[{key:n,value:function(){var e=this,t=this.entities.length;return{next:function(){return{value:e.entities[--t],done:t<0}}}}},{key:"size",get:function(){return this.entities.length}},{key:"has",value:function(e){return this.entityPositions.has(e)}},{key:"add",value:function(e){return e&&!this.has(e)&&(this.entities.push(e),this.entityPositions.set(e,this.entities.length-1),this.onEntityAdded.emit(e)),e}},{key:"remove",value:function(e){if(this.has(e)){this.onEntityRemoved.emit(e);var t=this.entityPositions.get(e);this.entityPositions.delete(e);var n=this.entities[this.entities.length-1];n!==e&&(this.entities[t]=n,this.entityPositions.set(n,t)),this.entities.pop()}return e}},{key:"clear",value:function(){var e,t=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,u=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return u=e.done,e},e:function(e){a=!0,s=e},f:function(){try{u||null==n.return||n.return()}finally{if(a)throw s}}}}(this);try{for(t.s();!(e=t.n()).done;){var n=e.value;this.remove(n)}}catch(e){t.e(e)}finally{t.f()}}}])&&s(t.prototype,a),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function d(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function f(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=l(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){u=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(u)throw o}}}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e,t){return b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},b(e,t)}function w(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&b(e,t)}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}function M(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return m(e)}function k(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=g(e);if(t){var i=g(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return M(this,n)}}function S(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var T=function(){function e(){y(this,e),S(this,"cache",new Map)}return v(e,[{key:"get",value:function(e,t){var n=this.cache.get(e);return void 0===n&&(this.cache.set(e,t),n=t),n}}]),e}();function O(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.every((function(t){return void 0!==e[t]}))}function A(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.every((function(t){return void 0===e[t]}))}new T;var R=function(e){return d(new Set(e.sort().filter((function(e){return!!e&&""!==e}))))},E=new T,I=function(e){var t=function(e){return{with:void 0!==e.with?R(e.with):[],without:void 0!==e.without?R(e.without):[]}}(e),n=JSON.stringify(t);return E.get(n,t)},P=function(e){w(n,e);var t=k(n);function n(){var e;y(this,n);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return S(m(e=t.call.apply(t,[this].concat(i))),"buckets",new Set),e}return v(n,[{key:"wants",value:function(e){return!0}},{key:"evaluate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;if(this.wants(t)?this.add(e):this.remove(e),this.has(e)){var n,r=f(this.buckets);try{for(r.s();!(n=r.n()).done;){var i=n.value;i.evaluate(e,t)}}catch(e){r.e(e)}finally{r.f()}}}},{key:"where",value:function(e){var t=this,n=this.entities.length,r=function(){var r;do{r=t.entities[--n]}while(r&&!e(r));return{value:r,done:n<0}};return S({},Symbol.iterator,(function(){return{next:r}}))}},{key:"with",value:function(){return this.archetype.apply(this,arguments)}},{key:"without",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.archetype({without:t})}},{key:"archetype",value:function(e){if("function"==typeof e){var t,n=f(this.buckets);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r instanceof B&&r.predicate===e)return r}}catch(e){n.e(e)}finally{n.f()}var i=new B(this,e);return this.buckets.add(i),i}if("object"!==h(e)){for(var o=arguments.length,s=new Array(o>1?o-1:0),u=1;u<o;u++)s[u-1]=arguments[u];return this.archetype({with:[e].concat(s)})}var a,c=I(e),l=f(this.buckets);try{for(l.s();!(a=l.n()).done;){var d=a.value;if(d instanceof U&&d.query===c)return d}}catch(e){l.e(e)}finally{l.f()}var y=new U(this,c);return this.buckets.add(y),y}}]),n}(a),j=function(e){w(n,e);var t=k(n);function n(e){var r;return y(this,n),(r=t.call(this)).source=e,r}return v(n,[{key:"startUpdating",value:function(){var e=this;this.source.onEntityAdded.add((function(t){e.wants(t)&&e.add(t)})),this.source.onEntityRemoved.add((function(t){e.remove(t)})),this.update()}},{key:"update",value:function(){var e,t=f(this.source);try{for(t.s();!(e=t.n()).done;){var n=e.value;this.evaluate(n)}}catch(e){t.e(e)}finally{t.f()}}}]),n}(P),B=function(e){w(n,e);var t=k(n);function n(e,r){var i;return y(this,n),(i=t.call(this,e)).source=e,i.predicate=r,i.startUpdating(),i}return v(n,[{key:"wants",value:function(e){return this.predicate(e)}}]),n}(j),U=function(e){w(n,e);var t=k(n);function n(e,r){var i;return y(this,n),(i=t.call(this,e)).source=e,i.query=r,i.startUpdating(),i}return v(n,[{key:"wants",value:function(e){return O.apply(void 0,[e].concat(d(this.query.with||[])))&&A.apply(void 0,[e].concat(d(this.query.without||[])))}}]),n}(j);function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var x,H=function(e){w(n,e);var t=k(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return y(this,n),S(m(e=t.call(this,r)),"entityToId",new Map),S(m(e),"idToEntity",new Map),S(m(e),"nextId",0),e.onEntityRemoved.add((function(t){if(e.entityToId.has(t)){var n=e.entityToId.get(t);e.idToEntity.delete(n),e.entityToId.delete(t)}})),e}return v(n,[{key:"update",value:function(e){function t(t,n,r){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t,n){if("function"==typeof t){var r=t(e);r&&Object.assign(e,r)}else"string"==typeof t?e[t]=n:t&&Object.assign(e,t);return this.has(e)&&this.evaluate(e),e}))},{key:"addComponent",value:function(e,t,n){void 0===e[t]&&(e[t]=n,this.has(e)&&this.evaluate(e))}},{key:"removeComponent",value:function(e,t){if(void 0!==e[t]){if(this.has(e)){var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){S(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);delete n[t],this.evaluate(e,n)}delete e[t]}}},{key:"id",value:function(e){if(this.has(e)){if(!this.entityToId.has(e)){var t=this.nextId++;this.entityToId.set(e,t),this.idToEntity.set(t,e)}return this.entityToId.get(e)}}},{key:"entity",value:function(e){return this.idToEntity.get(e)}}]),n}(P);function D(e,t){let n={};return Object.assign(n,t),n.isActivity=!0,e.add(n)}function q(e,t){console.log(e),function(e,t){if(e.hasOwnProperty("UseResourceOnce")&&!t.resources.IsAllResourceEnough(e.UseResourceOnce))return!1;if(e.hasOwnProperty("UseResourceOnce"))for(const n of e.UseResourceOnce)t.resources.AddResource(n.type,-n.amount,!1);return!0}(e,t)&&(function(e,t){if(e.hasOwnProperty("AddResourceOnce"))for(const n of e.AddResourceOnce)t.resources.AddResource(n.type,n.amount,!1)}(e,t),function(e,t){e.hasOwnProperty("ConstructBuilding")&&(t.buildings.AddBuilding(t.buildings.GetBuildingPrototype(e.ConstructBuilding.type)),e.hasOwnProperty("UseResourceOnce")&&(e.UseResourceOnce=t.buildings.GetBuildingCost(e.ConstructBuilding.type)))}(e,t)),t.UpdateUI()}!function(e){e[e.GatherFruit=0]="GatherFruit"}(x||(x={}));const L={id:"aGatherFruit",AddResourceOnce:[{type:"Fruit",amount:1}]},G={id:"aGatherBranch",AddResourceOnce:[{type:"Branch",amount:1}]},F={Grass:0,Shrub:0,Oak:0,Picea:0,Fruit:0,Wood:0,Branch:0,Culture:0,Science:0};class ${town;resourceData=new Map;resourceMap=new Map;resourceMapEnv=new Map;static resourceMapUniversal=new Map;environment={amount:0,capacity:1e3};onResourceAdded=new r;onResourceRemoved=new r;constructor(e){this.town=e}Init(){Object.keys(F).forEach((e=>{this.AddResourceEntry(e)}))}AddResourceEntry(e){if(!this.resourceMap.has(e)){let t={type:e,current:0,max:this.resourceData.get(e).initialMaxStacks,tickModify:0,visible:!1};if(this.resourceMap.set(e,t),!0===this.resourceData.get(e).env&&this.resourceMapEnv.set(e,t),!$.resourceMapUniversal.has(e)){let t={type:e,current:0,max:this.resourceData.get(e).initialUMaxStacks,tickModify:0,visible:!1};$.resourceMapUniversal.set(e,t)}return this.onResourceAdded.emit(t),t}}IsResourceEnough(e,t){return t<=this.GetResource(e).current}IsAllResourceEnough(e){for(const t of e)if(this.GetResourceAmount(t.type)<t.amount)return!1;return!0}AddResource(e,t,n=!0){this.resourceMap.has(e)||this.AddResourceEntry(e);let r=this.resourceMap.get(e);if(r.visible=!0,t<0&&r.current<-t){let n=$.resourceMapUniversal.get(e),r=n.current;n.current+=t,n.current<0&&(n.current=0),t-=n.current-r}let i=r.current;return r.current+=t,!0===this.resourceData.get(e).env&&!1===n&&console.warn("Environment resource is modified without `tick == true`!! Doing so will break environment constraints ..."),r.max>0&&r.current>=r.max&&(r.current=r.max),r.current<0&&(r.current=0),n&&(r.tickModify+=r.current-i),(r.current-i)/t}GetResource(e){if(this.resourceMap.has(e)){if($.resourceMapUniversal.has(e)){let t=$.resourceMapUniversal.get(e),n=this.resourceMap.get(e);return{type:e,current:t.current+n.current,max:t.max+n.max,tickModify:n.tickModify,tickModifyEnvHint:n.tickModifyEnvHint,visible:n.visible||t.visible}}return console.warn(`Universal data not found for resource ${e}. It might be a bug.`),this.resourceMap.get(e)}return null}GetResourceAmount(e){return this.resourceMap.has(e)?this.resourceMap.get(e).current:0}SetupEnvironment(){this.environment.amount=0;for(const e of this.resourceMapEnv.values())!0===this.resourceData.get(e.type).env&&(this.environment.amount+=e.current);this.environment.amount>this.environment.capacity&&console.warn("Env amount > capacity. Auto-rebalance not implemented. TODO: implement this.")}sRefreshResource(){for(const e of this.resourceMap.values()){e.tickModify=0;let t=e.type;if(this.resourceData.has(t)){let n=this.resourceData.get(t),r=n.regenBase+n.regenFactor*e.current;r>1e-5&&this.AddResource(e.type,r)}}}sUpdateEnvTickHint(){for(const e of this.resourceMapEnv.values())e.tickModifyEnvHint=e.tickModify}sAdjustEnvironment(){let e=0,t=0;for(const n of this.resourceMapEnv.values())n.tickModify>0?e+=n.tickModify:t+=-n.tickModify;let n=e;this.environment.amount-t+e>this.environment.capacity&&(n=this.environment.capacity-this.environment.amount+t);let r=1-n/e;for(const e of this.resourceMapEnv.values())e.tickModify>0&&(e.current-=e.tickModify*r,e.tickModify-=e.tickModify*r)}sTransferUniversalResource(){}}let N={en:{rFruit:"Wild fruits"},zh:{tick:"刻",sec:"秒",min:"分",rOak:"橡树",rPicea:"云杉",rShrub:"灌木丛",rGrass:"草",rFruit:"野果",rWood:"木材",rBranch:"树枝",rCulture:"文化",bPlantation:"种植园",bFarm:"农场",bLoggingCamp:"伐木场",bForestKeeper:"护林员小屋",bBonfire:"篝火堆",bHouse:"木屋",bGuild:"探险工会",bAtelier:"风车工房",bLibrary:"图书馆",bAcademy:"学院",bTheatre:"剧院",bMine:"矿井",aGatherFruit:"收集一些野果",aGatherBranch:"收集一些树枝"}};function _(e){return N.zh[e]||e}class z{artResourceDiv=document.querySelector("#resources #artResources");envResourceDiv=document.querySelector("#resources #envResources");resourcePanels=new Map;resourceTemplate=document.querySelector("#resources").querySelector("template");activityDiv=document.querySelector("#activities");activityButtons=new Map;buildingInfoDiv=document.querySelector("#buildings");buildingInfoPanels=new Map;buildingInfoTemplate=this.buildingInfoDiv.querySelector("template");tooltipDiv=document.querySelector("#tooltip");town;constructor(e){this.town=e}Init(){this.town.resources.onResourceAdded.add((e=>{if(!this.resourcePanels.has(e.type)){let t=this.resourceTemplate.content.cloneNode(!0).querySelector("div");t.classList.add("resource"),!0===this.town.resources.resourceData.get(e.type).env?this.envResourceDiv.appendChild(t):this.artResourceDiv.appendChild(t);let n={container:t,name:t.querySelector("#name"),stack:t.querySelector("#stack"),regen:t.querySelector("#regen")};this.resourcePanels.set(e.type,n),n.name.innerHTML=`${_("r"+e.type)}`}})),this.town.archetypes.activities.onEntityAdded.add((e=>{if(!this.activityButtons.has(e.id)){let t=document.createElement("button");t.classList.add("activity"),this.activityDiv.appendChild(t),t.onclick=t=>{q(e,this.town)},t.innerHTML=`${_(null==e.displayName?e.id:e.displayName)}`,this.activityButtons.set(e.id,t),this.town.world.addComponent(e,"HTMLElement",{elem:t,prevDisplay:t.style.display})}})),this.town.archetypes.buildingInfo.onEntityAdded.add((e=>{if(!this.buildingInfoPanels.has(e.id)){let t=this.buildingInfoTemplate.content.cloneNode(!0).querySelector("div");this.buildingInfoDiv.appendChild(t),t.id="info-"+e.buildingInfo.type;let n={container:t,constructBtn:t.querySelector("#construct"),name:t.querySelector("#name"),count:t.querySelector("#count")};n.constructBtn.onclick=t=>{q(e,this.town),this.ShowBuildingTooltip(e.buildingInfo.type)},n.constructBtn.onpointerenter=t=>{this.ShowBuildingTooltip(e.buildingInfo.type)},n.constructBtn.onpointerleave=e=>{this.HideTooltip()},n.name.innerHTML=_("b"+e.buildingInfo.type),n.count.innerHTML="0",this.activityButtons.set(e.id,n.constructBtn),this.town.world.addComponent(e,"HTMLElement",{elem:n.container,prevDisplay:n.container.style.display}),e.buildingInfo.ui=n}})),this.town.archetypes.hiddenHTML.onEntityAdded.add((e=>{"none"!=e.HTMLElement.elem.style.display&&(e.HTMLElement.prevDisplay=e.HTMLElement.elem.style.display,e.HTMLElement.elem.style.display="none")})),this.town.archetypes.visibleHTML.onEntityAdded.add((e=>{e.HTMLElement.elem.style.display=e.HTMLElement.prevDisplay})),this.town.world.onEntityAdded.add((e=>{console.log(`Added ${e.id}`,e)}))}ShowTooltip(e){this.tooltipDiv.innerHTML=e}HideTooltip(){this.tooltipDiv.innerHTML=""}ShowBuildingTooltip(e){let t="";this.town.buildings.GetBuildingCost(e).forEach((e=>{t+=`${_("r"+e.type)} x${e.amount.toFixed(2)}<br/>`})),this.ShowTooltip(t)}Update(){this.sUpdateResources(),this.sUpdateBuildingInfo()}sUpdateResources(){for(const e of this.town.resources.resourceMap.values()){let t=this.resourcePanels.get(e.type);e.max>0?t.stack.innerHTML=`${e.current.toFixed(2)} / ${e.max.toFixed(0)}`:t.stack.innerHTML=`${e.current.toFixed(2)}`;let n=e.tickModifyEnvHint;if(void 0===n&&(n=e.tickModify),Math.abs(n)>1e-8){let e=n;t.regen.innerHTML=`${(e<0?"":"+")+e.toFixed(4)} / ${_("tick")}`}else t.regen.innerHTML="";!1===e.visible?t.container.style.display="none":t.container.style.display="flex"}}sUpdateBuildingInfo(){for(const e of this.town.archetypes.buildingInfo)this.town.buildings.IsBuildingUnlocked(e.buildingInfo.type)&&this.town.world.removeComponent(e,"hidden"),e.buildingInfo.ui.count.innerHTML=`${this.town.buildings.archetypes[e.buildingInfo.type].size}`,this.town.resources.IsAllResourceEnough(this.town.buildings.GetBuildingCost(e.buildingInfo.type))?e.buildingInfo.ui.constructBtn.disabled=!1:e.buildingInfo.ui.constructBtn.disabled=!0}}const W={Plantation:{},Farm:{},LoggingCamp:{},ForestKeeper:{},Bonfire:{},House:{},Guild:{},Atelier:{},Academy:{},Mine:{}};class K{town;archetypes={};data=new Map;constructor(e){this.town=e}Init(){Object.keys(W).forEach((e=>{this.archetypes[e]=this.town.world.with("isBuilding",e),this.town.world.add({id:"aConstruct"+e,buildingInfo:{type:e},hidden:!0,UseResourceOnce:this.GetBuildingCost(e),ConstructBuilding:{type:e}})}))}AddBuilding(e){let t={};return Object.assign(t,e),t.isBuilding=!0,this.town.world.add(t)}GetBuildingPrototype(e){return this.data.get(e).prototype}GetBuildingCost(e){let t=this.archetypes[e].size;return this.data.get(e).buildCost.map((e=>({type:e.type,amount:e.base*Math.pow(e.growth,t)})))}IsBuildingUnlocked(e){let t=this.data.get(e).visibleRequirements,n=!0;return 0==t?t:(t.forEach((e=>{n=n&&this.town.resources.GetResource(e.type).visible})),n)}sModifyResources(){for(const e of this.town.archetypes.resourceBuildings){let t=1;for(const n of e.ChangeResourcePerTick.requires)t=Math.min(t,this.town.resources.GetResourceAmount(n.type)/n.amount);for(const n of e.ChangeResourcePerTick.products){let e=this.town.resources.GetResource(n.type);t=Math.min(t,(e.max-e.current)/n.amount)}if(!(t<=1e-5)){for(const n of e.ChangeResourcePerTick.requires)this.town.resources.AddResource(n.type,-n.amount*t);for(const n of e.ChangeResourcePerTick.products)this.town.resources.AddResource(n.type,n.amount*t)}}}}function J(e){return new Promise(((t,n)=>{var r=new XMLHttpRequest;r.onreadystatechange=function(){4==r.readyState&&200==r.status&&t(r.responseText)},r.open("GET",e),r.send()}))}const X={initialMaxStacks:0,regenBase:0,regenFactor:0,color:"#000000",initialUMaxStacks:0,initialUTransferSpeed:0,env:!1},Q={buildCost:[],growthAll:1.5,visibleRequirements:[],prototype:{id:"UNKNOWN"}};class V{world=new H;archetypes={hiddenHTML:this.world.with("hidden","HTMLElement"),visibleHTML:this.world.with("HTMLElement").without("hidden"),activities:this.world.with("id","isActivity"),resourceBuildings:this.world.with("isBuilding","ChangeResourcePerTick"),buildingInfo:this.world.with("buildingInfo"),hiddenBuildingInfo:this.world.with("buildingInfo").with("hidden")};ui=new z(this);resources=new $(this);buildings=new K(this);Init(){return new Promise(((e,t)=>{var n;(n=this,new Promise(((e,t)=>{Promise.all([J("data/resources.json"),J("data/buildings.json")]).then((t=>{{let e=t[0],r=JSON.parse(e);r.hasOwnProperty("$schema")&&delete r.$schema;for(const e in r){let t=r[e],i={type:e};Object.assign(i,structuredClone(X)),Object.assign(i,structuredClone(t)),n.resources.resourceData.set(e,i),console.log(`Read resource data of ${e}:`,i)}}{let e=t[1],r=JSON.parse(e);r.hasOwnProperty("$schema")&&delete r.$schema;for(const e in r){let t=r[e],i={};Object.assign(i,structuredClone(Q)),Object.assign(i,structuredClone(t)),i.buildCost.forEach((e=>{void 0===e.growth&&(e.growth=i.growthAll)})),i.prototype.hasOwnProperty(e)||(i.prototype[e]={}),i.prototype.hasOwnProperty("id")&&"UNKNOWN"!==i.prototype.id||(i.prototype.id="b"+e),n.buildings.data.set(e,i),console.log(`Read buliding data of ${e}:`,i)}}e()}))}))).then((()=>{this.ui.Init(),this.resources.Init(),this.buildings.Init(),this.resources.AddResource("Oak",250,!1),this.resources.AddResource("Picea",5,!1),this.resources.AddResource("Grass",545,!1),this.resources.AddResource("Shrub",200,!1),this.resources.SetupEnvironment(),D(this.world,L),D(this.world,G),e()}))}))}UpdateUI(){this.ui.Update()}Tick(){this.resources.sRefreshResource(),this.buildings.sModifyResources(),this.resources.sTransferUniversalResource(),this.resources.sUpdateEnvTickHint(),this.resources.sAdjustEnvironment(),this.UpdateUI()}}let Y=new class{n=0;e;_lastTimestamp=0;_lastTick=0;tickTimeMS=250;tickTimeMSBase=250;town;constructor(){this.town=new V}SetupTestUI(){let e=document.querySelector("#timeSlider");var t=document.getElementById("timeScale");document.getElementById("time1x").onclick=e=>{document.querySelector("#timeSlider").value="1",document.querySelector("#timeSlider").oninput(null)},document.getElementById("time10x").onclick=e=>{document.querySelector("#timeSlider").value="10",document.querySelector("#timeSlider").oninput(null)},t.innerHTML=e.valueAsNumber.toFixed(1)+"x",e.oninput=function(){t.innerHTML=e.valueAsNumber.toFixed(1)+"x",Y.tickTimeMS=Y.tickTimeMSBase/e.valueAsNumber},document.querySelector("#timeSlider").oninput(null)}Init(){this.SetupTestUI(),this.town.Init().then((()=>{this._lastTick=Date.now(),window.requestAnimationFrame((()=>this.Update()))}))}Update(){const e=Date.now()-this._lastTick;e>=this.tickTimeMS&&(this._lastTick=Date.now()-(e-this.tickTimeMS),this.town.Tick()),window.requestAnimationFrame((()=>this.Update()))}};Y.Init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,